$date
	Wed Jun 25 09:30:33 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module cpu_tb $end
$var wire 8 ! WRITEDATA [7:0] $end
$var wire 1 " WRITE $end
$var wire 8 # READDATA [7:0] $end
$var wire 1 $ READ $end
$var wire 32 % PC [31:0] $end
$var wire 32 & INSTRUCTION [31:0] $end
$var wire 1 ' BUSYWAIT $end
$var wire 8 ( ADDRESS [7:0] $end
$var reg 1 ) CLK $end
$var reg 1 * RESET $end
$var integer 32 + i [31:0] $end
$scope module my_datamem $end
$var wire 1 ) clock $end
$var wire 1 * reset $end
$var wire 8 , writedata [7:0] $end
$var wire 1 " write $end
$var wire 1 $ read $end
$var wire 8 - address [7:0] $end
$var reg 1 ' busywait $end
$var reg 1 . readaccess $end
$var reg 8 / readdata [7:0] $end
$var reg 1 0 writeaccess $end
$var integer 32 1 i [31:0] $end
$upscope $end
$scope module mycpu $end
$var wire 8 2 ADDRESS [7:0] $end
$var wire 1 ' BUSYWAIT $end
$var wire 1 ) CLK $end
$var wire 32 3 INSTRUCTION [31:0] $end
$var wire 8 4 READDATA [7:0] $end
$var wire 1 * RESET $end
$var wire 8 5 WRITEDATA [7:0] $end
$var wire 8 6 registerOp [7:0] $end
$var wire 8 7 negatedOp [7:0] $end
$var wire 1 8 flowSelect $end
$var wire 1 9 ZERO $end
$var wire 3 : WRITEREG [2:0] $end
$var wire 32 ; TARGET [31:0] $end
$var wire 8 < REGOUT2 [7:0] $end
$var wire 8 = REGOUT1 [7:0] $end
$var wire 8 > REGIN [7:0] $end
$var wire 3 ? READREG2 [2:0] $end
$var wire 3 @ READREG1 [2:0] $end
$var wire 32 A PCplus4 [31:0] $end
$var wire 32 B PCout [31:0] $end
$var wire 8 C OPERAND2 [7:0] $end
$var wire 8 D OFFSET [7:0] $end
$var wire 8 E IMMEDIATE [7:0] $end
$var wire 8 F ALURESULT [7:0] $end
$var reg 3 G ALUOP [2:0] $end
$var reg 1 H BRANCH $end
$var reg 1 I JUMP $end
$var reg 8 J OPCODE [7:0] $end
$var reg 32 K PC [31:0] $end
$var reg 1 $ READ $end
$var reg 1 " WRITE $end
$var reg 1 L WRITEENABLE $end
$var reg 1 M dataSelect $end
$var reg 1 N immSelect $end
$var reg 1 O signSelect $end
$scope module datamux $end
$var wire 8 P IN2 [7:0] $end
$var wire 1 M SELECT $end
$var wire 8 Q IN1 [7:0] $end
$var reg 8 R OUT [7:0] $end
$upscope $end
$scope module flowctrlmux $end
$var wire 1 8 SELECT $end
$var wire 32 S IN2 [31:0] $end
$var wire 32 T IN1 [31:0] $end
$var reg 32 U OUT [31:0] $end
$upscope $end
$scope module immediateMUX $end
$var wire 8 V IN2 [7:0] $end
$var wire 1 N SELECT $end
$var wire 8 W IN1 [7:0] $end
$var reg 8 X OUT [7:0] $end
$upscope $end
$scope module my_alu $end
$var wire 8 Y DATA2 [7:0] $end
$var wire 3 Z SELECT [2:0] $end
$var wire 1 9 ZERO $end
$var wire 8 [ orOut [7:0] $end
$var wire 8 \ forwardOut [7:0] $end
$var wire 8 ] andOut [7:0] $end
$var wire 8 ^ addOut [7:0] $end
$var wire 8 _ DATA1 [7:0] $end
$var reg 8 ` RESULT [7:0] $end
$scope module addUnit $end
$var wire 8 a DATA2 [7:0] $end
$var wire 8 b RESULT [7:0] $end
$var wire 8 c DATA1 [7:0] $end
$upscope $end
$scope module andUnit $end
$var wire 8 d DATA2 [7:0] $end
$var wire 8 e RESULT [7:0] $end
$var wire 8 f DATA1 [7:0] $end
$upscope $end
$scope module forwardUnit $end
$var wire 8 g DATA [7:0] $end
$var wire 8 h RESULT [7:0] $end
$upscope $end
$scope module orUnit $end
$var wire 8 i DATA2 [7:0] $end
$var wire 8 j RESULT [7:0] $end
$var wire 8 k DATA1 [7:0] $end
$upscope $end
$upscope $end
$scope module my_flowControl $end
$var wire 1 H BRANCH $end
$var wire 1 I JUMP $end
$var wire 1 8 OUT $end
$var wire 1 9 ZERO $end
$upscope $end
$scope module my_jumpbranchAdder $end
$var wire 8 l OFFSET [7:0] $end
$var wire 22 m signBits [21:0] $end
$var wire 32 n TARGET [31:0] $end
$var wire 32 o PC [31:0] $end
$upscope $end
$scope module my_pcAdder $end
$var wire 32 p PC [31:0] $end
$var wire 32 q PCplus4 [31:0] $end
$upscope $end
$scope module my_reg $end
$var wire 1 ) CLK $end
$var wire 8 r IN [7:0] $end
$var wire 3 s INADDRESS [2:0] $end
$var wire 8 t OUT1 [7:0] $end
$var wire 3 u OUT1ADDRESS [2:0] $end
$var wire 8 v OUT2 [7:0] $end
$var wire 3 w OUT2ADDRESS [2:0] $end
$var wire 1 * RESET $end
$var wire 1 x WRITE $end
$var integer 32 y i [31:0] $end
$upscope $end
$scope module my_twosComp $end
$var wire 8 z IN [7:0] $end
$var wire 8 { OUT [7:0] $end
$upscope $end
$scope module negationMUX $end
$var wire 8 | IN1 [7:0] $end
$var wire 8 } IN2 [7:0] $end
$var wire 1 O SELECT $end
$var reg 8 ~ OUT [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module my_reg $end
$var reg 8 !" \REGISTER[0] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module my_reg $end
$var reg 8 "" \REGISTER[1] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module my_reg $end
$var reg 8 #" \REGISTER[2] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module my_reg $end
$var reg 8 $" \REGISTER[3] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module my_reg $end
$var reg 8 %" \REGISTER[4] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module my_reg $end
$var reg 8 &" \REGISTER[5] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module my_reg $end
$var reg 8 '" \REGISTER[6] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module my_reg $end
$var reg 8 (" \REGISTER[7] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module my_datamem $end
$upscope $end
$scope module mycpu $end
$scope module datamux $end
$upscope $end
$scope module flowctrlmux $end
$upscope $end
$scope module immediateMUX $end
$upscope $end
$scope module my_alu $end
$scope module addUnit $end
$upscope $end
$scope module andUnit $end
$upscope $end
$scope module forwardUnit $end
$upscope $end
$scope module orUnit $end
$upscope $end
$upscope $end
$scope module my_flowControl $end
$upscope $end
$scope module my_jumpbranchAdder $end
$upscope $end
$scope module my_pcAdder $end
$upscope $end
$scope module my_reg $end
$upscope $end
$scope module my_twosComp $end
$upscope $end
$scope module negationMUX $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module my_datamem $end
$var reg 8 )" \memory_array[0] [7:0] $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module my_datamem $end
$var reg 8 *" \memory_array[1] [7:0] $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module my_datamem $end
$var reg 8 +" \memory_array[2] [7:0] $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module my_datamem $end
$var reg 8 ," \memory_array[3] [7:0] $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module my_datamem $end
$var reg 8 -" \memory_array[4] [7:0] $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module my_datamem $end
$var reg 8 ." \memory_array[5] [7:0] $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module my_datamem $end
$var reg 8 /" \memory_array[6] [7:0] $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module my_datamem $end
$var reg 8 0" \memory_array[7] [7:0] $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module my_datamem $end
$var reg 8 1" \memory_array[8] [7:0] $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module my_datamem $end
$var reg 8 2" \memory_array[9] [7:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
b0 )"
bx ("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
xx
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
xO
xN
xM
xL
bx K
bx J
xI
xH
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
x9
x8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
b100000000 1
00
bx /
0.
bx -
bx ,
b1010 +
1*
0)
bx (
0'
bx &
bx %
0$
bx #
0"
bx !
$end
#4
1)
#5
b0 ("
b0 '"
b0 &"
b0 %"
b0 $"
b0 #"
b0 ""
b0 !"
b1000 y
b0 %
b0 K
b0 p
0*
#6
b100 B
b100 U
b100 A
b100 T
b100 o
b100 q
#7
b0 @
b0 u
b111 ?
b111 w
b11 :
b11 s
b0 m
b0 J
b111 E
b111 V
b11 D
b11 l
b110000000000000111 &
b110000000000000111 3
#8
08
1x
b111 C
b111 X
b111 Y
b111 a
b111 d
b111 g
b111 i
1L
0H
0I
0O
1N
b0 G
b0 Z
0)
#9
09
b111 >
b111 R
b111 r
b111 (
b111 -
b111 2
b111 F
b111 Q
b111 `
b0 6
b0 W
b0 ~
b0xxx ]
b0xxx e
bx111 [
bx111 j
b111 \
b111 h
b0 !
b0 ,
b0 5
b0 =
b0 _
b0 c
b0 f
b0 k
b0 t
b0 <
b0 v
b0 z
b0 |
b10000 ;
b10000 S
b10000 n
#10
b111 [
b111 j
b0 ]
b0 e
b0 7
b0 {
b0 }
#11
b111 ^
b111 b
#12
1)
#13
b100 %
b100 K
b100 p
b111 $"
#14
b1000 B
b1000 U
b1000 A
b1000 T
b1000 o
b1000 q
#15
b110 C
b110 X
b110 Y
b110 a
b110 d
b110 g
b110 i
b110 ?
b110 w
b101 :
b101 s
b110 E
b110 V
b101 D
b101 l
b1010000000000000110 &
b1010000000000000110 3
#16
b110 >
b110 R
b110 r
b110 (
b110 -
b110 2
b110 F
b110 Q
b110 `
b110 [
b110 j
b110 \
b110 h
0)
#17
b110 ^
b110 b
b11100 ;
b11100 S
b11100 n
#20
1)
#21
b110 &"
b1000 %
b1000 K
b1000 p
#22
b1100 B
b1100 U
b1100 A
b1100 T
b1100 o
b1100 q
#23
b100 C
b100 X
b100 Y
b100 a
b100 d
b100 g
b100 i
b100 ?
b100 w
b100 :
b100 s
b100 E
b100 V
b100 D
b100 l
b1000000000000000100 &
b1000000000000000100 3
#24
b100 >
b100 R
b100 r
b100 (
b100 -
b100 2
b100 F
b100 Q
b100 `
b100 [
b100 j
b100 \
b100 h
0)
#25
b100 ^
b100 b
#28
1)
#29
b1100 %
b1100 K
b1100 p
b100 %"
#30
b10000 B
b10000 U
b10000 A
b10000 T
b10000 o
b10000 q
#31
b11 @
b11 u
b0 :
b0 s
b1010 J
b0 D
b0 l
b100 6
b100 W
b100 ~
b1010000000000000001100000100 &
b1010000000000000001100000100 3
b100 <
b100 v
b100 z
b100 |
#32
10
1'
0x
1"
0L
0N
b11111100 7
b11111100 {
b11111100 }
0)
#33
b111 !
b111 ,
b111 5
b111 =
b111 _
b111 c
b111 f
b111 k
b111 t
b10000 ;
b10000 S
b10000 n
#34
b111 [
b111 j
b100 ]
b100 e
#35
b1011 ^
b1011 b
#36
1)
#40
0)
#44
1)
#48
0)
#52
1)
#56
0)
#60
1)
#64
0)
#68
1)
#72
0)
#76
0"
1)
00
0'
b111 -"
#77
b10000 %
b10000 K
b10000 p
#78
b10100 B
b10100 U
b10100 A
b10100 T
b10100 o
b10100 q
#79
b10 ?
b10 w
b1011 J
b10 E
b10 V
b1011000000000000001100000010 &
b1011000000000000001100000010 3
#80
10
1'
b10 C
b10 X
b10 Y
b10 a
b10 d
b10 g
b10 i
1"
1N
b10100 ;
b10100 S
b10100 n
0)
#81
09
b10 >
b10 R
b10 r
b10 (
b10 -
b10 2
b10 F
b10 Q
b10 `
b0 6
b0 W
b0 ~
b10 ]
b10 e
b10 \
b10 h
b0 <
b0 v
b0 z
b0 |
#82
b0 7
b0 {
b0 }
b1001 ^
b1001 b
#84
1)
#88
0)
#92
1)
#96
0)
#100
1)
#104
0)
#108
1)
#112
0)
#116
1)
#120
0)
#124
0"
1)
00
0'
b111 +"
#125
b10100 %
b10100 K
b10100 p
#126
b11000 B
b11000 U
b11000 A
b11000 T
b11000 o
b11000 q
#127
b0 @
b0 u
b100 C
b100 X
b100 Y
b100 a
b100 d
b100 g
b100 i
b100 ?
b100 w
b1 :
b1 s
b1000 J
b100 E
b100 V
b1 D
b1 l
b1000000000010000000000000100 &
b1000000000010000000000000100 3
#128
b100 (
b100 -
b100 2
b100 F
b100 Q
b100 `
bx >
bx R
bx r
1.
1'
0x
b0 C
b0 X
b0 Y
b0 a
b0 d
b0 g
b0 i
b100 ]
b100 e
b100 \
b100 h
1M
1$
1L
0N
0)
#129
19
b100 C
b100 X
b100 Y
b100 a
b100 d
b100 g
b100 i
b0 (
b0 -
b0 2
b0 F
b0 Q
b0 `
b100 6
b100 W
b100 ~
b0 ]
b0 e
b0 \
b0 h
b0 !
b0 ,
b0 5
b0 =
b0 _
b0 c
b0 f
b0 k
b0 t
b100 <
b100 v
b100 z
b100 |
b11100 ;
b11100 S
b11100 n
#130
09
b100 (
b100 -
b100 2
b100 F
b100 Q
b100 `
b100 \
b100 h
b100 [
b100 j
b11111100 7
b11111100 {
b11111100 }
#131
b100 ^
b100 b
#132
1)
#136
0)
#140
1)
#144
0)
#148
1)
#152
0)
#156
1)
#160
0)
#164
1)
#168
0)
#172
0$
1x
b111 >
b111 R
b111 r
1)
0.
0'
b111 #
b111 /
b111 4
b111 P
#173
b11000 %
b11000 K
b11000 p
b111 ""
#174
b11100 B
b11100 U
b11100 A
b11100 T
b11100 o
b11100 q
#175
b10 ?
b10 w
b111 :
b111 s
b1001 J
b10 E
b10 V
b111 D
b111 l
b1001000001110000000000000010 &
b1001000001110000000000000010 3
#176
0x
1.
1'
b10 C
b10 X
b10 Y
b10 a
b10 d
b10 g
b10 i
1$
1N
0)
#177
09
b10 (
b10 -
b10 2
b10 F
b10 Q
b10 `
b0 6
b0 W
b0 ~
b10 [
b10 j
b10 \
b10 h
b0 <
b0 v
b0 z
b0 |
b111000 ;
b111000 S
b111000 n
#178
b0 7
b0 {
b0 }
b10 ^
b10 b
#180
1)
#184
0)
#188
1)
#192
0)
#196
1)
#200
0)
#204
1)
#208
0)
#212
1)
#216
0)
#220
0$
1x
1)
0.
0'
#221
b11100 %
b11100 K
b11100 p
b111 ("
#222
b100000 B
b100000 U
b100000 A
b100000 T
b100000 o
b100000 q
#223
bx @
bx u
bx C
bx X
bx Y
bx a
bx d
bx g
bx i
bx ?
bx w
bx :
bx s
bx m
bx J
bx E
bx V
bx D
bx l
bx &
bx 3
#224
x9
bx (
bx -
bx 2
bx F
bx Q
bx `
bx [
bx j
bx \
bx h
0)
#225
bx 6
bx W
bx ~
bx !
bx ,
bx 5
bx =
bx _
bx c
bx f
bx k
bx t
bx ^
bx b
bx <
bx v
bx z
bx |
bx ;
bx S
bx n
#226
bx ]
bx e
bx 7
bx {
bx }
#228
1)
#229
b100000 %
b100000 K
b100000 p
#230
b100100 B
b100100 U
b100100 A
b100100 T
b100100 o
b100100 q
#232
0)
#236
1)
#237
b100100 %
b100100 K
b100100 p
#238
b101000 B
b101000 U
b101000 A
b101000 T
b101000 o
b101000 q
#240
0)
#244
1)
#245
b101000 %
b101000 K
b101000 p
#246
b101100 B
b101100 U
b101100 A
b101100 T
b101100 o
b101100 q
#248
0)
#252
1)
#253
b101100 %
b101100 K
b101100 p
#254
b110000 B
b110000 U
b110000 A
b110000 T
b110000 o
b110000 q
#256
0)
#260
1)
#261
b110000 %
b110000 K
b110000 p
#262
b110100 B
b110100 U
b110100 A
b110100 T
b110100 o
b110100 q
#264
0)
#268
1)
#269
b110100 %
b110100 K
b110100 p
#270
b111000 B
b111000 U
b111000 A
b111000 T
b111000 o
b111000 q
#272
0)
#276
1)
#277
b111000 %
b111000 K
b111000 p
#278
b111100 B
b111100 U
b111100 A
b111100 T
b111100 o
b111100 q
#280
0)
#284
1)
#285
b111100 %
b111100 K
b111100 p
#286
b1000000 B
b1000000 U
b1000000 A
b1000000 T
b1000000 o
b1000000 q
#288
0)
#292
1)
#293
b1000000 %
b1000000 K
b1000000 p
#294
b1000100 B
b1000100 U
b1000100 A
b1000100 T
b1000100 o
b1000100 q
#296
0)
#300
1)
#301
b1000100 %
b1000100 K
b1000100 p
#302
b1001000 B
b1001000 U
b1001000 A
b1001000 T
b1001000 o
b1001000 q
#304
0)
#308
1)
#309
b1001000 %
b1001000 K
b1001000 p
#310
b1001100 B
b1001100 U
b1001100 A
b1001100 T
b1001100 o
b1001100 q
#312
0)
#316
1)
#317
b1001100 %
b1001100 K
b1001100 p
#318
b1010000 B
b1010000 U
b1010000 A
b1010000 T
b1010000 o
b1010000 q
#320
0)
#324
1)
#325
b1010000 %
b1010000 K
b1010000 p
#326
b1010100 B
b1010100 U
b1010100 A
b1010100 T
b1010100 o
b1010100 q
#328
0)
#332
1)
#333
b1010100 %
b1010100 K
b1010100 p
#334
b1011000 B
b1011000 U
b1011000 A
b1011000 T
b1011000 o
b1011000 q
#336
0)
#340
1)
#341
b1011000 %
b1011000 K
b1011000 p
#342
b1011100 B
b1011100 U
b1011100 A
b1011100 T
b1011100 o
b1011100 q
#344
0)
#348
1)
#349
b1011100 %
b1011100 K
b1011100 p
#350
b1100000 B
b1100000 U
b1100000 A
b1100000 T
b1100000 o
b1100000 q
#352
0)
#356
1)
#357
b1100000 %
b1100000 K
b1100000 p
#358
b1100100 B
b1100100 U
b1100100 A
b1100100 T
b1100100 o
b1100100 q
#360
0)
#364
1)
#365
b1100100 %
b1100100 K
b1100100 p
#366
b1101000 B
b1101000 U
b1101000 A
b1101000 T
b1101000 o
b1101000 q
#368
0)
#372
1)
#373
b1101000 %
b1101000 K
b1101000 p
#374
b1101100 B
b1101100 U
b1101100 A
b1101100 T
b1101100 o
b1101100 q
#376
0)
#380
1)
#381
b1101100 %
b1101100 K
b1101100 p
#382
b1110000 B
b1110000 U
b1110000 A
b1110000 T
b1110000 o
b1110000 q
#384
0)
#388
1)
#389
b1110000 %
b1110000 K
b1110000 p
#390
b1110100 B
b1110100 U
b1110100 A
b1110100 T
b1110100 o
b1110100 q
#392
0)
#396
1)
#397
b1110100 %
b1110100 K
b1110100 p
#398
b1111000 B
b1111000 U
b1111000 A
b1111000 T
b1111000 o
b1111000 q
#400
0)
#404
1)
#405
b1111000 %
b1111000 K
b1111000 p
#406
b1111100 B
b1111100 U
b1111100 A
b1111100 T
b1111100 o
b1111100 q
#408
0)
#412
1)
#413
b1111100 %
b1111100 K
b1111100 p
#414
b10000000 B
b10000000 U
b10000000 A
b10000000 T
b10000000 o
b10000000 q
#416
0)
#420
1)
#421
b10000000 %
b10000000 K
b10000000 p
#422
b10000100 B
b10000100 U
b10000100 A
b10000100 T
b10000100 o
b10000100 q
#424
0)
#428
1)
#429
b10000100 %
b10000100 K
b10000100 p
#430
b10001000 B
b10001000 U
b10001000 A
b10001000 T
b10001000 o
b10001000 q
#432
0)
#436
1)
#437
b10001000 %
b10001000 K
b10001000 p
#438
b10001100 B
b10001100 U
b10001100 A
b10001100 T
b10001100 o
b10001100 q
#440
0)
#444
1)
#445
b10001100 %
b10001100 K
b10001100 p
#446
b10010000 B
b10010000 U
b10010000 A
b10010000 T
b10010000 o
b10010000 q
#448
0)
#452
1)
#453
b10010000 %
b10010000 K
b10010000 p
#454
b10010100 B
b10010100 U
b10010100 A
b10010100 T
b10010100 o
b10010100 q
#456
0)
#460
1)
#461
b10010100 %
b10010100 K
b10010100 p
#462
b10011000 B
b10011000 U
b10011000 A
b10011000 T
b10011000 o
b10011000 q
#464
0)
#468
1)
#469
b10011000 %
b10011000 K
b10011000 p
#470
b10011100 B
b10011100 U
b10011100 A
b10011100 T
b10011100 o
b10011100 q
#472
0)
#476
1)
#477
b10011100 %
b10011100 K
b10011100 p
#478
b10100000 B
b10100000 U
b10100000 A
b10100000 T
b10100000 o
b10100000 q
#480
0)
#484
1)
#485
b10100000 %
b10100000 K
b10100000 p
#486
b10100100 B
b10100100 U
b10100100 A
b10100100 T
b10100100 o
b10100100 q
#488
0)
#492
1)
#493
b10100100 %
b10100100 K
b10100100 p
#494
b10101000 B
b10101000 U
b10101000 A
b10101000 T
b10101000 o
b10101000 q
#496
0)
#500
1)
#501
b10101000 %
b10101000 K
b10101000 p
#502
b10101100 B
b10101100 U
b10101100 A
b10101100 T
b10101100 o
b10101100 q
#504
0)
#505
